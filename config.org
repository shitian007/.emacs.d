#+TITLE: DF's Emacs.d Config
* Personal Info
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Wong Ding Feng"
	  user-mail-address "dfwong5566@gmail.com")
  #+END_SRC    
* Init
  Use-package is a better package manager
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-and-compile(defvar use-package-verbose t) 
      (require 'cl)
      (require 'use-package)
      (require 'bind-key)
      (setq use-package-always-ensure t)
      (setq use-package-verbose t)
      )
  #+END_SRC
* Evil mode 
  I use evil
  [[https:blog.aaronbieber.com/2016/01/23/living-in-evil.html][more evil configs]]
  #+BEGIN_SRC emacs-lisp
  (use-package evil
	     :config
	     (evil-mode 1))
  #+END_SRC
* Settings
** Sexifying, Theming
   I had a hard time learning emacs from staring at keybindings. Learning it through using is quite fun and themeing emacs to look pretty is a good objective to force me to learn emacs.
   I like colour colour.
   #+BEGIN_SRC emacs-lisp
     (use-package powerline)
     (use-package moe-theme
       :init
       (setq moe-theme-highlight-buffer-id t)
       ;;(setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
       ;;(setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
       ;;(setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))
       :config
       (moe-theme-set-color 'blue)
       (moe-dark)
       (powerline-moe-theme))
   #+END_SRC
** Setting the frame
   remove ugly scroll bar and stuff when using emacs client
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (menu-bar-mode -1)
       (tool-bar-mode -1)
       (scroll-bar-mode -1)
       (tooltip-mode -1))
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :font "Iosevka-11" )
     (set-frame-font "Iosevka-11" nil t)
     ;;(set-face-attribute 'default nil :font "OpenDyslexicMono-11" )
     ;;(set-frame-font "OpenDyslexicMono-8" nil t)
     ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-11" )
     ;;(set-frame-font "DejaVu Sans Mono-11" nil t)
   #+END_SRC
** Desktop mode
** Emacs Server
   Load the emacs server, if it is not running. This allows for almost-instant emacs "startup".
   #+BEGIN_SRC emacs-lisp
     (require 'server)
     (unless (server-running-p)
       (server-start))
   #+END_SRC
  
   #+BEGIN_SRC emacs-lisp
     (desktop-save-mode 1)
   #+END_SRC
** Backup directory
   #+begin_src emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+end_src
** Autosaving
   Auto save all open buffers, when Emacs loses focus.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook
	       (lambda () (save-some-buffers t)))
   #+END_SRC
* A copy of jethro mode
  #+BEGIN_SRC emacs-lisp
    (defvar d-mode-map (make-sparse-keymap)
      "Keymap for `d-mode'.")

    (define-minor-mode d-mode
      "A minor mode so that my key settings override annoying major modes."
      ;; If init-value is not set to t, this mode does not get enabled in
      ;; `fundamental-mode' buffers even after doing \"(global-d-mode 1)\".
      ;; More info: http://emacs.stackexchange.com/q/16693/115
      :init-value t
      :lighter    " d"
      :keymap     d-mode-map)

    (define-globalized-minor-mode global-d-mode d-mode d-mode)

    (add-to-list 'emulation-mode-map-alists `((d-mode . ,d-mode-map)))

    ;; Turn off the minor mode in the minibuffer
    (defun turn-off-d-mode ()
      "Turn off d-mode."
      (d-mode -1))

    (add-hook 'minibuffer-setup-hook #'turn-off-d-mode)
  #+END_SRC
* Core Utilities
** Dash
   Dash is a library used to simplify Emacs-lisp development. Some custom elisp code use Dash, so I load it first here anyway.
   #+BEGIN_SRC emacs-lisp
     (use-package dash)
   #+END_SRC
** Hydra
   #+begin_src emacs-lisp
     (use-package hydra)
   #+end_src
** Ivy
   I've recently switched over from =helm= to =ivy=. Ivy is simpler, and easier to extend.
*** flx
    Flx is required for fuzzy-matching.
    #+begin_src emacs-lisp
      (use-package flx)
    #+end_src
*** Fuzzy Isearch
    #+BEGIN_SRC emacs-lisp
      (use-package flx-isearch
	:bind (:map jethro-mode-map
		    ("C-M-s" . flx-isearch-forward)
		    ("C-M-r" . flx-isearch-backward)))
    #+END_SRC
*** Counsel
    Counsel contains ivy enhancements for commonly-used functions.
    #+begin_src emacs-lisp
      (use-package counsel
	:diminish ivy-mode
	:bind
	(:map d-mode-map
	      ("C-c C-r" . ivy-resume)
	      ("M-a" . counsel-M-x)
	      ("C-d" . counsel-grep)
	      ("C-s" . swiper)
	      ("C-c i" . counsel-imenu)
	      ("C-x C-f" . counsel-find-file)
	      ("C-x j" . counsel-dired-jump)
	      ("C-x l" . counsel-locate)
	      ("C-c j" . counsel-git)
	      ("C-c f" . counsel-recentf)
	      ("M-y" . counsel-yank-pop)
	      :map swiper-map
	      ("C-r" . ivy-previous-line)
	      :map help-map
	      ("f" . counsel-describe-function)
	      ("v" . counsel-describe-variable)
	      ("l" . counsel-info-lookup-symbol)
	      :map ivy-minibuffer-map
	      ("C-d" . ivy-dired)
	      ("C-o" . ivy-occur)
	      ("<return>" . ivy-alt-done)
	      ("M-<return>" . ivy-immediate-done)
	      :map read-expression-map
	      ("C-r" . counsel-expression-history))
	:init
	(add-hook 'after-init-hook 'ivy-mode)
	:config
	(setq counsel-grep-swiper-limit 20000)
	(defun ivy-dired ()
	  (interactive)
	  (if ivy--directory
	      (ivy-quit-and-run
	       (dired ivy--directory)
	       (when (re-search-forward
		      (regexp-quote
		       (substring ivy--current 0 -1)) nil t)
		 (goto-char (match-beginning 0))))
	    (user-error
	     "Not completing files currently")))
	(setq counsel-grep-base-command
	      "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
	(setq counsel-find-file-at-point t)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(setq ivy-initial-inputs-alist nil)
	(setq ivy-re-builders-alist
	      '((ivy-switch-buffer . ivy--regex-plus)
		(swiper . ivy--regex-plus)
		(t . ivy--regex-fuzzy))) 
	(ivy-set-actions
	 t
	 '(("I" insert "insert"))))
    #+end_src
*** wgrep
    #+BEGIN_SRC emacs-lisp
      (use-package wgrep)
    #+END_SRC
*** rg
    #+BEGIN_SRC emacs-lisp
      (use-package rg
	:bind (:map d-mode-map
		    ("M-s" . rg)))
    #+END_SRC
    ;;* Search
* Shell
  #+BEGIN_SRC emacs-lisp
    (require 'eshell)
  #+END_SRC
** Set default shell to bash
   Because fish doesn't play well with Emacs.
   #+begin_src emacs-lisp
     (setq-default explicit-shell-file-name "/usr/bin/zsh")
     (setq-default shell-file-name "/usr/bin/zsh")
   #+end_src
** Add PATH to shell
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell 
       :config
       (exec-path-from-shell-initialize))
   #+end_src
** Eshell configuration
   #+BEGIN_SRC emacs-lisp
     (require 'em-smart)
     (setq eshell-glob-case-insensitive nil
	   eshell-error-if-no-glob nil
	   eshell-scroll-to-bottom-on-input nil
	   eshell-where-to-jump 'begin
	   eshell-review-quick-commands nil
	   eshell-smart-space-goes-to-end t)
   #+END_SRC
** Eshell theme
   #+BEGIN_SRC emacs-lisp
  (use-package eshell-git-prompt
    :config
    (eshell-git-prompt-use-theme 'powerline))
   #+END_SRC
** Open eshell in current/project directory
   #+BEGIN_SRC emacs-lisp
     (defun d/eshell-here ()
       "Opens up a new shell in projectile root. If a prefix argument is
     passed, use the buffer's directory."
       (interactive) 
       (let* ((projectile-name (projectile-project-name))
	      (current-directory (car
				  (last
				   (split-string
				    (if (buffer-file-name)
					(file-name-directory (buffer-file-name))
				      default-directory) "/" t)))))
	 (split-window-vertically)
	 (other-window 1)
	 (if (equal projectile-name "-")
	     (progn
	       (eshell "new")
	       (rename-buffer (concat "*eshell: " current-directory "*")))
	   (projectile-with-default-dir (projectile-project-root)
	     (eshell "new")
	     (rename-buffer (concat "*eshell: " projectile-name "*"))))))

     (bind-key "C-x m" 'd/eshell-here d-mode-map)
   #+END_SRC
** Exiting eshell
   #+BEGIN_SRC emacs-lisp
     (defun eshell/x ()
       (unless (one-window-p)
	 (delete-window))
       (eshell/exit))
   #+END_SRC
** Quitting Eshell
   #+BEGIN_SRC emacs-lisp
     (defun eshell/x ()
       (delete-window)
       (eshell/exit))
   #+END_SRC
** Isearch
   #+BEGIN_SRC emacs-lisp
     (bind-key "C-s" 'eshell-isearch-forward eshell-mode-map)
     (bind-key "C-r" 'eshell-isearch-backward eshell-mode-map)
   #+END_SRC
** with-editor
   Use =with-editor= to use current Emacs to open everything that invokes =$EDITOR=.
   #+BEGIN_SRC emacs-lisp
     (use-package with-editor
       :ensure t
       :init
       (progn
	 (add-hook 'shell-mode-hook  'with-editor-export-editor)
	 (add-hook 'eshell-mode-hook 'with-editor-export-editor)))
   #+END_SRC
* Org Stuff
** Org bullet
   add some sex to bullets
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook
	   (lambda ()
	     (org-bullets-mode t)))
   #+END_SRC
** Org Org
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'time)
     (setq org-log-done 'done)
     (setq user-init-file "~/.emacs.d/config.org")
     (setq org-src-tab-acts-natively t)
     (defun my-org-screenshot ()
       "Take a screenshot into a time stamped unique-named file in the
     same directory as the org-buffer and insert a link to this file."
     (interactive)
     (setq filename
	(concat
	 (make-temp-name
	  (concat (buffer-file-name)
		  "_"
		  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
     (call-process "import" nil nil nil filename)
     (insert (concat "[[" filename "]]"))
     (org-display-inline-images))
     (set-default 'truncate-lines t)
   #+END_SRC
** Org preview html
   #+BEGIN_SRC emacs-lisp
   (use-package org-preview-html
   :ensure t)
   #+END_SRC
** Org gcal
   #+BEGIN_SRC emacs-lisp
   (use-package org-gcal
   :ensure t)
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     ;;(use-package neotree
     ;;  :ensure t
     ;;  :config
     ;;  (global-set-key [f8] 'neotree-toggle))
   #+END_SRC
** Org Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((C . t)
        (lisp . t)
        (python . t)))
     (use-package htmlize
       :ensure t)
   #+END_SRC
** Org Mode for Note taking
*** Deft
    #+BEGIN_SRC emacs-lisp
      (use-package deft
        :bind
        (:map d-mode-map
              ("C-c n" . deft))
        :config
        ;;(setq deft-extensions '("org" ".org.gpg"))
        (setq deft-default-extension "org")
        (setq deft-use-filename-as-title t)
        (setq deft-use-filter-string-for-filename t))
    #+END_SRC
*** Exporting Deft Notes
    #+BEGIN_SRC emacs-lisp
      (defun d/org-export-deft-file (file)
        (interactive)
        (org-html-export-to-html t t))
    #+END_SRC
** Org export column
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-pdf-process
	   '("pdflatex -shell-escape -interaction nonstopmode %f"
	     "pdflatex -shell-escape -interaction nonstopmode %f"))
     (require 'ox-latex)
     (setq org-latex-default-table-environment "tabular")
     (setq org-latex-tables-booktabs t)
     (setq org-latex-listings 'minted)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
     (setq org-latex-classes
	   '(("article"
	      "\\documentclass[6pt]{article}
       \\usepackage[margin={0.4in,0.5in}, a4paper]{geometry}
       \\usepackage{booktabs}
       \\usepackage{hyperref}
       \\usepackage{minted}
       \\usepackage{tabularx}
       \\usepackage{parskip}
       \\setlength\\columnsep{10pt}
       \\setlength{\\columnseprule}{1pt}
       \\usepackage[compact]{titlesec}
       \\titlespacing{\\section}{0pt}{*2}{*0}
       \\titlespacing{\\subsection}{0pt}{*2}{*0}
       \\titlespacing{\\subsubsection}{0pt}{*2}{*0}
       \\titleformat*{\\section}{\\large\\bfseries}
       \\titleformat*{\\subsection}{\\normalsize\\bfseries}
       \\titleformat*{\\subsubsection}{\\normalsize\\bfseries}"
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) 
	     ("book"
	      "\\documentclass[5pt]{memoir}
			       \\usepackage{charter}
			       \\usepackage[T1]{fontenc}
			       \\usepackage{booktabs}
			       \\usepackage{amsmath}
			       \\usepackage{minted}
			       \\usemintedstyle{borland}
			       \\usepackage{color}
			       \\usepackage{epigraph}
			       \\usepackage{enumitem}
			       \\setlist{nosep}
			       \\setlength\\epigraphwidth{13cm}
			       \\setlength\\epigraphrule{0pt}
			       \\usepackage{fontspec}
			       \\usepackage{graphicx}
			       \\usepackage{hyperref}
			       \\hypersetup {colorlinks = true, allcolors = red}
			       \\title{}
			       [NO-DEFAULT-PACKAGES]
			       [NO-PACKAGES]"
	      ("\\chapter{%s}" . "\\chapter*{%s}")
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	     ("latex-notes"
	      "\\documentclass[6pt]{article}
	 \\usepackage[margin={0.3in,0.3in}, a4paper,landscape]{geometry}
	 \\usepackage{hyperref}
	 \\usepackage{amsmath}
	 \\usepackage{multicol}
	 \\usepackage{booktabs}
	 \\usepackage{enumitem}
	 \\usepackage[compact]{titlesec}
	 \\titlespacing{\\section}{0pt}{*2}{*0}
	 \\titlespacing{\\subsection}{0pt}{*2}{*0}
	 \\titlespacing{\\subsubsection}{0pt}{*2}{*0}
	 \\titleformat*{\\section}{\\large\\bfseries}
	 \\titleformat*{\\subsection}{\\normalsize\\bfseries}
	 \\titleformat*{\\subsubsection}{\\normalsize\\bfseries}
	 \\setlist[itemize]{leftmargin=*}
	 \\setlist[enumerate]{leftmargin=*}
	 \\setlength\\columnsep{5pt}
	 \\setlength{\\columnseprule}{1pt}       
	 \\setlist{nosep}         
	 \\usepackage{minted}
	 \\usemintedstyle{bw}
	 \\usemintedstyle[java]{bw}
	 \\setminted[]{frame=none,fontsize=\\footnotesize,linenos=false}
	 "
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

     (defun d/org-multicol-to-latex (async subtreep visible-only body-only)
       (let ((contents (buffer-string))
	     (buffer-name (file-name-sans-extension buffer-file-name)))
	 (with-temp-buffer
	   (insert "#+LATEX_CLASS: latex-notes\n")
	   (insert contents)
	   (goto-char (point-min))
	   (org-next-visible-heading 1)
	   (insert "#+BEGIN_EXPORT latex\n\\begin{multicols*}{4}\n#+END_EXPORT\n")
	   (goto-char (point-max))
	   (insert "#+BEGIN_EXPORT latex\n\\end{multicols*}\n#+END_EXPORT")
	   (org-export-to-file 'latex (format "%s.tex" buffer-name)
	     async subtreep visible-only body-only nil))))

     (defun d/org-multicol-to-pdf (async subtreep visible-only body-only)
       (let ((contents (buffer-string))
	     (buffer-name (file-name-sans-extension buffer-file-name)))
	 (with-temp-buffer
	   (insert "#+LATEX_CLASS: latex-notes\n")
	   (insert contents)
	   (goto-char (point-min))
	   (org-next-visible-heading 1)
	   (insert "#+BEGIN_EXPORT latex\n\\begin{multicols*}{4}\n#+END_EXPORT\n")
	   (goto-char (point-max))
	   (insert "#+BEGIN_EXPORT latex\n\\end{multicols*}\n#+END_EXPORT")
	   (org-export-to-file 'latex (format "%s.tex" buffer-name)
	     async subtreep visible-only body-only nil
	     (lambda (file) (org-latex-compile file))))))

     (org-export-define-derived-backend 'latex-notes 'latex
       :menu-entry
       '(?L "Export to LaTeX notes"
	    ((?l "Export to LaTeX" d/org-multicol-to-latex)
	     (?p "Export to PDF" d/org-multicol-to-pdf))))
   #+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (which-key-mode))
#+END_SRC
* relative
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :config
    (linum-relative-on)
    (linum-relative-global-mode)
    (setq linum-relative-current-symbol "")
    )
#+END_SRC
