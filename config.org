CONFIG.ORG -*- mode: org -*-
#+TITLE: DF's Emacs.d Config
#+AUTHOR: Wong Ding Feng
#+EMAIL: dingfengwong@gmail.com
* Setup
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-archives '(("org" . "http://orgmode.org/elpa/")
			     ("gnu" . "http://elpa.gnu.org/packages/")
			     ("melpa"     . "http://melpa.org/packages/")
			     ("marmalade" . "http://marmalade-repo.org/packages/")))
    (package-initialize)
    ;;(package-refresh-contents)
  #+END_SRC
* Use-Package
  Use-package is a better package manager
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (setq use-package-verbose t)
    (setq use-package-always-ensure t)
    (require 'use-package)
  #+END_SRC
* Init File Support
  Load up a collection of enhancements to Emacs Lisp, including [[https://github.com/magnars/dash.el][dash]],
  [[https://github.com/magnars/s.el][s]] for string manipulation, and [[https://github.com/rejeep/f.el][f]] for file manipulation.
  #+BEGIN_SRC emacs-lisp
    (require 'cl)
    (use-package dash
      :ensure t
      :config (eval-after-load "dash" '(dash-enable-font-lock)))
    (use-package s)
    (use-package f)
   #+END_SRC
* misc variable
  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq scroll-conservatively 10000
	  scroll-preserve-screen-position t)
  #+END_SRC
* Personal Info
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Wong Ding Feng"
	  user-mail-address "dfwong5566@gmail.com")
  #+END_SRC    
* COMMENT Evil mode 
  I use evil
  [[https:blog.aaronbieber.com/2016/01/23/living-in-evil.html][more evil configs]]
  #+BEGIN_SRC emacs-lisp
  (use-package evil
	     :config
	     (evil-mode 1))
  #+END_SRC
* Tabs
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq tab-width 2)
    (setq-default tab-always-indent 'complete)
  #+END_SRC
* Which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :diminish which-key-mode
      :config

      ;; Replacements for how KEY is replaced when which-key displays
      ;;   KEY ‚Üí FUNCTION
      ;; Eg: After "C-c", display "right ‚Üí winner-redo" as "‚ñ∂ ‚Üí winner-redo"
      (setq which-key-key-replacement-alist
            '(("<\\([[:alnum:]-]+\\)>" . "\\1")
              ("left"                  . "‚óÄ")
              ("right"                 . "‚ñ∂")
              ("up"                    . "‚ñ≤")
              ("down"                  . "‚ñº")
              ("delete"                . "DEL") ; delete key
              ("\\`DEL\\'"             . "BS") ; backspace key
              ("next"                  . "PgDn")
              ("prior"                 . "PgUp"))

            ;; List of "special" keys for which a KEY is displayed as just
            ;; K but with "inverted video" face... not sure I like this.
            which-key-special-keys '("RET" "DEL" ; delete key
                                     "ESC" "BS" ; backspace key
                                     "SPC" "TAB")

            ;; Replacements for how part or whole of FUNCTION is replaced:
            which-key-description-replacement-alist
            '(("Prefix Command" . "prefix")
              ("\\`calc-"       . "") ; Hide "calc-" prefixes when listing M-x calc keys
              ("\\`projectile-" . "ùìü/")
              ("\\`org-babel-"  . "ob/"))

            ;; Underlines commands to emphasize some functions:
            which-key-highlighted-command-list
            '("\\(rectangle-\\)\\|\\(-rectangle\\)"
              "\\`org-"))
 
      ;; Change what string to display for a given *complete* key binding
      ;; Eg: After "C-x", display "8 ‚Üí +unicode" instead of "8 ‚Üí +prefix"
      (which-key-add-key-based-replacements
        "C-x 8"   "unicode"
        "C-c T"   "toggles-"
        "C-c p s" "projectile-search"
        "C-c p 4" "projectile-other-buffer-"
        "C-x a"   "abbrev/expand"
        "C-x r"   "rect/reg"
        "C-c /"   "engine-mode-map"
        "C-c C-v" "org-babel")

      (which-key-mode 1))
  #+END_SRC
* macrostep
  #+BEGIN_SRC emacs-lisp
    (use-package macrostep)
  #+END_SRC
* Core Utilities
* Hydra
  #+begin_src emacs-lisp
    (use-package hydra)
  #+end_src
* Ivy
  I've recently switched over from =helm= to =ivy=. Ivy is simpler, and easier to extend.
** flx
   Flx is required for fuzzy-matching.
   #+begin_src emacs-lisp
     (use-package flx)
   #+end_src
** Fuzzy Isearch
   #+BEGIN_SRC emacs-lisp
     (use-package flx-isearch
       :bind (:map jethro-mode-map
		   ("C-M-s" . flx-isearch-forward)
		   ("C-M-r" . flx-isearch-backward)))
   #+END_SRC
** Counsel
     Counsel contains ivy enhancements for commonly-used functions.
     #+begin_src emacs-lisp
       (use-package counsel
         :diminish ivy-mode
         :bind*
         (("C-c C-r" . ivy-resume)
          ("C-s" . counsel-grep-or-swiper)
          ("C-r" . counsel-grep-or-swiper)
          ("C-c i" . counsel-imenu)
          ("C-x b" . ivy-switch-buffer)
          ("C-x k" . kill-buffer)
          ("C-x C-f" . counsel-find-file)
          ("C-x j" . counsel-dired-jump)
          ("C-x l" . counsel-locate)
          ("C-c j" . counsel-git)
          ("C-c f" . counsel-recentf)
          ("M-y" . counsel-yank-pop))
         :bind (:map help-map
                     ("f" . counsel-describe-function)
                     ("v" . counsel-describe-variable)
                     ("l" . counsel-info-lookup-symbol)
                     :map ivy-minibuffer-map
                     ("C-d" . ivy-dired)
                     ("C-o" . ivy-occur)
                     ("<return>" . ivy-alt-done)
                     ("M-<return>" . ivy-immediate-done)
                     :map read-expression-map
                     ("C-r" . counsel-expression-history))
         :init
         (add-hook 'after-init-hook 'ivy-mode)
         :config
         (setq counsel-grep-swiper-limit 20000)
         (setq counsel-grep-base-command
               "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
         (setq counsel-find-file-at-point t)
         (setq ivy-use-virtual-buffers t)
         ;; fancy by default
         (setq ivy-display-style 'fancy)
         ;; can i disable this ? (setq ivy-initial-inputs-alist nil)
         (setq ivy-use-selectable-prompt t)
         (setq ivy-re-builders-alist
               '((ivy-switch-buffer . ivy--regex-plus)
                 (swiper . ivy--regex-plus)
                 (t . ivy--regex-fuzzy))) 
         (ivy-set-actions
          t
          '(("I" insert "insert")))
         (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur))
 #+END_SRC
* rg
  #+BEGIN_SRC emacs-lisp
    (use-package rg
      :bind (("M-s" . rg)))
  #+END_SRC
* undo
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :diminish undo-tree-mode
      :init
      (global-undo-tree-mode 1)
      :config
      (defalias 'redo 'undo-tree-redo)
      :bind (("C-z" . undo)     ; Zap to character isn't helpful
             ("C-S-z" . redo)))
  #+END_SRC
* ace window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      ;; set windows keys a s d ...
      (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
      (global-set-key (kbd "C-x o") 'ace-window)
      :diminish ace-window-mode)
  #+END_SRC
* expand-region
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      (defun ha/expand-region (lines)
        "Prefix-oriented wrapper around Magnar's `er/expand-region'.

    Call with LINES equal to 1 (given no prefix), it expands the
    region as normal.  When LINES given a positive number, selects
    the current line and number of lines specified.  When LINES is a
    negative number, selects the current line and the previous lines
    specified.  Select the current line if the LINES prefix is zero."
        (interactive "p")
        (cond ((= lines 1)   (er/expand-region 1))
              ((< lines 0)   (ha/expand-previous-line-as-region lines))
              (t             (ha/expand-next-line-as-region (1+ lines)))))

      (defun ha/expand-next-line-as-region (lines)
        (message "lines = %d" lines)
        (beginning-of-line)
        (set-mark (point))
        (end-of-line lines))

      (defun ha/expand-previous-line-as-region (lines)
        (end-of-line)
        (set-mark (point))
        (beginning-of-line (1+ lines)))

      :bind ("C-=" . ha/expand-region))
  #+END_SRC
* wrap-region
  #+BEGIN_SRC emacs-lisp
    (use-package wrap-region
      :ensure   t
      :config
      (wrap-region-global-mode t)
      (wrap-region-add-wrappers
       '(("(" ")")
         ("[" "]")
         ("{" "}")
         ("<" ">")
         ("'" "'")
         ("\"" "\"")
         ("‚Äò" "‚Äô"   "q")
         ("‚Äú" "‚Äù"   "Q")
         ("*" "*"   "b"   org-mode)                 ; bolden
         ("*" "*"   "*"   org-mode)                 ; bolden
         ("/" "/"   "i"   org-mode)                 ; italics
         ("/" "/"   "/"   org-mode)                 ; italics
         ("~" "~"   "c"   org-mode)                 ; code
         ("~" "~"   "~"   org-mode)                 ; code
         ("=" "="   "v"   org-mode)                 ; verbatim
         ("=" "="   "="   org-mode)                 ; verbatim
         ("_" "_"   "u" '(org-mode markdown-mode))  ; underline
         ("**" "**" "b"   markdown-mode)            ; bolden
         ("*" "*"   "i"   markdown-mode)            ; italics
         ("`" "`"   "c" '(markdown-mode ruby-mode)) ; code
         ("`" "'"   "c"   lisp-mode)                ; code
         ))
      :diminish wrap-region-mode)
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :demand t
      :init
      (setq projectile-keymap-prefix (kbd "C-x p"))
      :config
      (require 'projectile)
      (projectile-global-mode)
      (use-package counsel-projectile
        :bind (("s-f" . counsel-projectile-find-file)
               ("s-b" . counsel-projectile-switch-to-buffer)
               ("C-c s" . jethro/counsel-projectile-rg))
        :config
        (defun jethro/counsel-projectile-rg (&optional options)
          "Ivy version of `projectile-rg'."
          (interactive)
          (if (projectile-project-p)
              (let* ((options
                      (if current-prefix-arg
                          (read-string "options: ")
                        options))
                     (ignored
                      (unless (eq (projectile-project-vcs) 'git)
                        ;; rg supports git ignore files
                        (append
                         (cl-union (projectile-ignored-files-rel) grep-find-ignored-files)
                         (cl-union (projectile-ignored-directories-rel) grep-find-ignored-directories))))
                     (options
                      (concat options " "
                              (mapconcat (lambda (i)
                                           (concat "--ignore-file " (shell-quote-argument i)))
                                         ignored
                                         " "))))
                (counsel-rg (ivy-thing-at-point)
                            (projectile-project-root)
                            options
                            (projectile-prepend-project-name "rg")))
            (user-error "You're not in a project")))
        (counsel-projectile-on))
      (setq projectile-use-git-grep t)
      (setq projectile-create-missing-test-files t)
      (setq projectile-completion-system 'ivy)

      (setq projectile-switch-project-action
            #'projectile-commander)
      (def-projectile-commander-method ?S
        "Run a search in the project"
        (counsel-projectile-rg))
      (def-projectile-commander-method ?s
        "Open a *eshell* buffer for the project."
        (projectile-run-eshell))
      (def-projectile-commander-method ?d
        "Open project root in dired."
        (projectile-dired))
      (def-projectile-commander-method ?g
        "Show magit status."
        (magit-status))
      (def-projectile-commander-method ?j
        "Jack-in."
        (let* ((opts (projectile-current-project-files))
               (file (ivy-read
                      "Find file: " 
                      opts)))
          (find-file (expand-file-name
                      file (projectile-project-root)))
          (run-hooks 'projectile-find-file-hook)
          (cider-jack-in))))
  #+END_SRC
* Settings
** Sexifying, Theming
   I had a hard time learning emacs from staring at keybindings. Learning it through using is quite fun and themeing emacs to look pretty is a good objective to force me to learn emacs.
   I like colour colour.
   #+BEGIN_SRC emacs-lisp
     (use-package powerline)
     (use-package moe-theme
       :init
       (setq moe-theme-highlight-buffer-id t)
       ;;(setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
       ;;(setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
       ;;(setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))
       :config
       (moe-theme-set-color 'blue)
       (moe-dark)
       (powerline-moe-theme))
   #+END_SRC
** Setting the frame
   remove ugly scroll bar and stuff when using emacs client
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (menu-bar-mode -1)
       (tool-bar-mode -1)
       (scroll-bar-mode -1)
       (tooltip-mode -1))
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :font "Iosevka-11" )
     (set-frame-font "Iosevka-11" nil t)
     ;;(set-face-attribute 'default nil :font "OpenDyslexicMono-11" )
     ;;(set-frame-font "OpenDyslexicMono-8" nil t)
     ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-11" )
     ;;(set-frame-font "DejaVu Sans Mono-11" nil t)
   #+END_SRC
** Emacs Server
   Load the emacs server, if it is not running. This allows for almost-instant emacs "startup".
   #+BEGIN_SRC emacs-lisp
     (require 'server)
     (unless (server-running-p)
       (server-start))
   #+END_SRC
** Desktop mode
   #+BEGIN_SRC emacs-lisp
     (desktop-save-mode 1)
   #+END_SRC
** Backup directory
   #+begin_src emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+end_src
** Autosaving
   Auto save all open buffers, when Emacs loses focus.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook
	       (lambda () (save-some-buffers t)))
   #+END_SRC
* Shell
  #+BEGIN_SRC emacs-lisp
    (require 'eshell)
  #+END_SRC
** Set default shell to bash
   Because fish doesn't play well with Emacs.
   #+begin_src emacs-lisp
     (setq-default explicit-shell-file-name "/usr/bin/zsh")
     (setq-default shell-file-name "/usr/bin/zsh")
   #+end_src
** Add PATH to shell
   #+begin_src emacs-lisp
     A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.
     (use-package exec-path-from-shell 
       :config
       (exec-path-from-shell-initialize))
   #+end_src
** Eshell configuration
   #+BEGIN_SRC emacs-lisp
     (require 'em-smart)
     (setq eshell-glob-case-insensitive nil
	   eshell-error-if-no-glob nil
	   eshell-scroll-to-bottom-on-input nil
	   eshell-where-to-jump 'begin
	   eshell-review-quick-commands nil
	   eshell-smart-space-goes-to-end t)
   #+END_SRC
** Eshell theme
   #+BEGIN_SRC emacs-lisp
  (use-package eshell-git-prompt
    :config
    (eshell-git-prompt-use-theme 'powerline))
   #+END_SRC
** Open eshell in current/project directory
   #+BEGIN_SRC emacs-lisp
     (defun d/eshell-here ()
       "Opens up a new shell in projectile root. If a prefix argument is
     passed, use the buffer's directory."
       (interactive) 
       (let* ((projectile-name (projectile-project-name))
              (current-directory (car
                                  (last
                                   (split-string
                                    (if (buffer-file-name)
                                        (file-name-directory (buffer-file-name))
                                      default-directory) "/" t)))))
         (split-window-vertically)
         (other-window 1)
         (if (equal projectile-name "-")
             (progn
               (eshell "new")
               (rename-buffer (concat "*eshell: " current-directory "*")))
           (projectile-with-default-dir (projectile-project-root)
             (eshell "new")
             (rename-buffer (concat "*eshell: " projectile-name "*"))))))

     (bind-key "C-x m" 'd/eshell-here)
   #+END_SRC
** Exiting eshell
   #+BEGIN_SRC emacs-lisp
     (defun eshell/x ()
       (unless (one-window-p)
	 (delete-window))
       (eshell/exit))
   #+END_SRC
** Isearch
   #+BEGIN_SRC emacs-lisp
     (bind-key "C-s" 'eshell-isearch-forward eshell-mode-map)
     (bind-key "C-r" 'eshell-isearch-backward eshell-mode-map)
   #+END_SRC
* Org Stuff
** Org agenda mode
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Org bullet
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook
                 (lambda ()
                   (org-bullets-mode t))))
   #+END_SRC
** Org Org
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'time)
     (setq org-log-done 'done)
     (setq org-src-tab-acts-natively t)
     (set-default 'truncate-lines t)
     (defun my-org-screenshot ()
       "Take a screenshot into a time stamped unique-named file in the
     same directory as the org-buffer and insert a link to this file."
     (interactive)
     (setq filename
	(concat
	 (make-temp-name
	  (concat (buffer-file-name)
		  "_"
		  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
     (call-process "import" nil nil nil filename)
     (insert (concat "[[" filename "]]"))
     (org-display-inline-images))
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :config
       (global-set-key [f8] 'neotree-toggle))
   #+END_SRC
** Org Babel languages
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((C . t)
        (lisp . t)
        (python . t)))
   #+END_SRC
** Org Mode for Note taking
*** Deft
    #+BEGIN_SRC emacs-lisp
      (use-package deft
	:config
	(setq deft-default-extension '("org" "txt"))
	(setq deft-directory "~/df/notes/deft")
	(setq deft-recursive t)
	(setq deft-use-filename-as-title t)
	(setq deft-use-filter-string-for-filename t))
    #+END_SRC
** Org export column
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-pdf-process
	   '("pdflatex -shell-escape -interaction nonstopmode %f"
	     "pdflatex -shell-escape -interaction nonstopmode %f"))
     (require 'ox-latex)
     (setq org-latex-default-table-environment "tabular")
     (setq org-latex-tables-booktabs t)
     (setq org-latex-listings 'minted)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
     (setq org-latex-classes
	   '(("article"
	      "\\documentclass[6pt]{article}
       \\usepackage[margin={0.4in,0.5in}, a4paper]{geometry}
       \\usepackage{booktabs}
       \\usepackage{hyperref}
       \\usepackage{minted}
       \\usepackage{tabularx}
       \\usepackage{parskip}
       \\setlength\\columnsep{10pt}
       \\setlength{\\columnseprule}{1pt}
       \\usepackage[compact]{titlesec}
       \\titlespacing{\\section}{0pt}{*2}{*0}
       \\titlespacing{\\subsection}{0pt}{*2}{*0}
       \\titlespacing{\\subsubsection}{0pt}{*2}{*0}
       \\titleformat*{\\section}{\\large\\bfseries}
       \\titleformat*{\\subsection}{\\normalsize\\bfseries}
       \\titleformat*{\\subsubsection}{\\normalsize\\bfseries}"
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) 
	     ("book"
	      "\\documentclass[5pt]{memoir}
			       \\usepackage{charter}
			       \\usepackage[T1]{fontenc}
			       \\usepackage{booktabs}
			       \\usepackage{amsmath}
			       \\usepackage{minted}
			       \\usemintedstyle{borland}
			       \\usepackage{color}
			       \\usepackage{epigraph}
			       \\usepackage{enumitem}
			       \\setlist{nosep}
			       \\setlength\\epigraphwidth{13cm}
			       \\setlength\\epigraphrule{0pt}
			       \\usepackage{fontspec}
			       \\usepackage{graphicx}
			       \\usepackage{hyperref}
			       \\hypersetup {colorlinks = true, allcolors = red}
			       \\title{}
			       [NO-DEFAULT-PACKAGES]
			       [NO-PACKAGES]"
	      ("\\chapter{%s}" . "\\chapter*{%s}")
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	     ("latex-notes"
	      "\\documentclass[6pt]{article}
	 \\usepackage[margin={0.3in,0.3in}, a4paper,landscape]{geometry}
	 \\usepackage{hyperref}
	 \\usepackage{amsmath}
	 \\usepackage{multicol}
	 \\usepackage{booktabs}
	 \\usepackage{enumitem}
	 \\usepackage[compact]{titlesec}
	 \\titlespacing{\\section}{0pt}{*2}{*0}
	 \\titlespacing{\\subsection}{0pt}{*2}{*0}
	 \\titlespacing{\\subsubsection}{0pt}{*2}{*0}
	 \\titleformat*{\\section}{\\large\\bfseries}
	 \\titleformat*{\\subsection}{\\normalsize\\bfseries}
	 \\titleformat*{\\subsubsection}{\\normalsize\\bfseries}
	 \\setlist[itemize]{leftmargin=*}
	 \\setlist[enumerate]{leftmargin=*}
	 \\setlength\\columnsep{5pt}
	 \\setlength{\\columnseprule}{1pt}       
	 \\setlist{nosep}         
	 \\usepackage{minted}
	 \\usemintedstyle{bw}
	 \\usemintedstyle[java]{bw}
	 \\setminted[]{frame=none,fontsize=\\footnotesize,linenos=false}
	 "
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

     (defun d/org-multicol-to-latex (async subtreep visible-only body-only)
       (let ((contents (buffer-string))
	     (buffer-name (file-name-sans-extension buffer-file-name)))
	 (with-temp-buffer
	   (insert "#+LATEX_CLASS: latex-notes\n")
	   (insert contents)
	   (goto-char (point-min))
	   (org-next-visible-heading 1)
	   (insert "#+BEGIN_EXPORT latex\n\\begin{multicols*}{4}\n#+END_EXPORT\n")
	   (goto-char (point-max))
	   (insert "#+BEGIN_EXPORT latex\n\\end{multicols*}\n#+END_EXPORT")
	   (org-export-to-file 'latex (format "%s.tex" buffer-name)
	     async subtreep visible-only body-only nil))))

     (defun d/org-multicol-to-pdf (async subtreep visible-only body-only)
       (let ((contents (buffer-string))
	     (buffer-name (file-name-sans-extension buffer-file-name)))
	 (with-temp-buffer
	   (insert "#+LATEX_CLASS: latex-notes\n")
	   (insert contents)
	   (goto-char (point-min))
	   (org-next-visible-heading 1)
	   (insert "#+BEGIN_EXPORT latex\n\\begin{multicols*}{4}\n#+END_EXPORT\n")
	   (goto-char (point-max))
	   (insert "#+BEGIN_EXPORT latex\n\\end{multicols*}\n#+END_EXPORT")
	   (org-export-to-file 'latex (format "%s.tex" buffer-name)
	     async subtreep visible-only body-only nil
	     (lambda (file) (org-latex-compile file))))))

     (org-export-define-derived-backend 'latex-notes 'latex
       :menu-entry
       '(?L "Export to LaTeX notes"
	    ((?l "Export to LaTeX" d/org-multicol-to-latex)
	     (?p "Export to PDF" d/org-multicol-to-pdf))))
   #+END_SRC
* relative
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :config
    (linum-relative-on)
    (linum-relative-global-mode)
    (setq linum-relative-current-symbol "")
    )
#+END_SRC
* yaml-mode
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode)
  #+END_SRC
* emacs dashboard
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :config
      (dashboard-setup-startup-hook))
  #+END_SRC
  
